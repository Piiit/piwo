Link: [http://localhost/projekte/home/lib/tests/lexer42.php Lexer v0.42]  \\
Link: [http://localhost/projekte/home/lib/tests/lexer42cleanup.php Lexer v0.42B]  \\
Link: [http://localhost/projekte/home/lib/tests/lexer42c.php Lexer v0.42C] \\
Link: [http://localhost/projekte/home/lib/tests/lexertests/ Lexer v0.42D - Testumgebung]  

= Todo/Changelog =

== v0.42B ==
* :i: ''addAbstractNode'' wurde verworfen... wird später komplett neu entwickelt!
* :ok: Cache für Regexp, damit ''getPatternString'' nur einmal für jeden Modus die Regexp bauen muss.

== v0.42C ==
* :ok: WORD-Pattern einführen
* :ok: Level-Berechnung für jedes Token: Performance -> nur einmal berechnen!
* :ok: Debug: Tests in v0.42G
 * :ok: Ausgabe über [[dom-funktionen|DOM-Funktionen]]  (Diese Funktionen sollten auch dem Parser zur Verfügung stehen -> ''public'')
 * :ok: Aufwendige Debugfunktionen nur starten, wenn gefordert (Parameter im constructor) <= PERFORMANCE! 
 * :ok: jeden Status für jeden Zyklus speichern
 * :ok: PERFORMANCE: Nur Textposition speichern... Speicherbedarf reduzieren!
 * :ok: Funktionen für Ausgabe der Debuginformationen (''getBeforeMatch'', ''getAfterMatch'', ''showEntities'') \\ Rest wird über ''getDebugInfo'' ausgegeben (''array'')
* :ok: [[asttree|Abstract Syntax Tree (AST)]] wie in ANTLR ausgeben

== v0.42D ==
* :ok: [[abstractnode|Abstrakte Knoten]]: Bsp. ''tablerow''-Knoten sollten im Elternknoten ''table'' zusammengefasst werden.
* Bessere ''addLog'' Funktionen (''array'' und ''class'')
* Verschiedene Testprogramme mit Auswahlliste, Ladefunktion etc. um Bugs herauszufinden
* Log und Debug als Objektklasse verbinden und in separater Datei ablegen
* AST Schleife auslagern
* Testprogramme in separaten Dateien ablegen (DOM-Tests, Debug/Log-Tests, ...)
* :?: DOM-Funktionen mit internen Node-Zeiger im Lexer (Knoten sollten Objekte mit Zeigerfunktionen sein, abgeleitet von ''pwLexer'')

== v0.42E ==
* Doppelt vergebene Pattern abfangen und ???
* Leeren Exitpattern -> dafür array mit Modes, die den aktuellen Status beenden, wenn neuer gestartet wird... \\ oder leer, wenn jeder neue Status den aktuellen beendet.

== v0.42F ==
* Parameter (Flag): ''NO_SHIFT'', damit ein Muster erkannt wird, der Textzeiger aber stehen bleibt. Bsp.: ''tablerow'' (Autom. Umwandlung in einen lookahead)
* Parameter (Flag): ''NOT_EMPTY'' bedeutet der Textknoten innerhalb eines Tokens darf nicht leer sein.
* Parameter (Flag): ''IGNORE_EMPTY'' Leere Tokens werden ignoriert. Bsp.: ''<nowiki>== ==</nowiki>'' wird zwar als ''header'' erkannt aber nicht in den AST aufgenommen.

== v0.42G ==
* FEATURE: AST als dynamische Liste (Javascript) ausgeben (wie Filemanager)
* Code aufräumen
* Bugfixes
* Tests

= getPatternString: modes =
$$
$$  /**
$$   * Gibt den regulären Ausdruck für den aktuellen Status zurück.
$$    * Erlaubte line- und section_start pattern inkl. des section_end patterns des
$$    * aktuellen Status' wird zurückgeliefert.
$$    *
$$    * @param   string          $statusname    Name des aktuellen Status (Bsp. quoted string), default = #DOCUMENT
$$    * @param   boolean         $keysensitive  'i'-Parameter für die regex, default = false
$$    * @return  string/boolean  regexp-string oder false bei einem Fehler
$$    */
$$
$$   public function getPatternString($statusname = "#DOCUMENT", $keysensitive = false)
$$

Jeder Modus darf in einem bestimmten Kontext vorkommen. Siehe [[#addSectionPattern]].

Falls eine neue Sektion aufgenommen wird, kann man festlegen worin sie vorkommen darf.
Der aktuelle ''patternstring'' enthält immer nur die erlaubten pattern und zwar in folgender Reihenfolge:
# Alle erlaubten ''enter''-pattern
# und einen ''exit''-pattern für den aktuellen Modus

= addSectionPattern =
Paramterliste:
^ Paramtername ^ Datentyp ^ Erklärung ^ Beispiel ^ Syntaxbeispiele ^
| ''name'' | string | Statusname | header | ''<nowiki>= Überschrift =</nowiki>''
| ''entrypattern'' | string(regexp) | wenn dieses Token gefunden wird, wechselt der Lexer in ein neuen Status ''name'' | header | ''\n\s*={1,5}''
| ''exitpattern'' | string(regexp) | wenn dieses Token gefunden wird, verlässt der Lexer den aktuellen Status wieder | header | ''={1,5}''
| ''modes'' | array | Alle Kontextnamen, in denen ''name'' erlaubt ist. \\ ''header'' darf nur in #DOCUMENT und section vorkommen, wird in zB. Listen ignoriert | ''<nowiki>array("#DOCUMENT", "section")</nowiki>'' |
| ''type'' | string \\ :fixme: | Alle Typen: ''TYPE%%_%%SECTION''; ''TYPE%%_%%LINE''; ''TYPE%%_%%WORD'' \\ (sollte in Zukunft auf versch. Flags/Parameter erweitert werden \\ Bsp. ''EMPTY'', ''!EMPTY'', ...) ||