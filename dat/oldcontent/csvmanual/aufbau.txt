= Aufbau der CSV-Tabellen =

Eine CSV-Datei besteht aus drei Teilen:
* Konfigurationskopf //(Header)//: Die Kopfzeile beinhaltet Kommentare, spezielle [[#Konfigurationen]] und Angaben für Labels von Variablen der [[#Konfigurationskopf (Header)|Datenstruktur]].
* Strukturzeile //(Struct)//: Aufbau der Datenbank (CSV-Datei-Struktur)... Datentypen, Konfigurationen, Spaltennamen, etc.
* Inhalt //(Content)//: Inhalt per CSV (Comma separated Values)
 
Dabei gibt es drei Arten von Zeilentypen:
* Kommentare beginnen mit einem # und können auch am Zeilenende einer Konfigurationszeile stehen (im Contentbereich sind sie nicht erlaubt)
* Konfigurationszeilen beginnen mit !! und haben zwei verschiedene Arten:
 * Form 1: ''!! Schlüssel = Wert'' für einfache Einstellungen oder ...
 * Form 2: ''!! Strukturzeile'' ([[#Strukturzeile (Struct)|siehe Kapitel -> Strukturzeile]])
 
== Konfigurationskopf (Header)==
$$ # HEADER #
$$ # Kommentar: Test für pw_csv                   # Alle Kommentare beginnen mit einem "#"
$$ !! title       = %count Geburtstage            # Konfigurationseinträge beginnen mit "!!" und haben folgende Form "Schlüssel = Wert" (Weitere infos unter pw_config)
$$ !! title_empty = Keine Geburtstage gespeichert # Titel falls keine Einträge in der CSV vorhanden sind
$$ !! title_conf  = Geburtstage merken            # Titel für das Konfigurationsmenü

=== Konfigurationen ===
| :> ''title'' | Titel der Tabelle, falls Werte vorhanden sind |
| :> ''title_empty'' | Titel der Tabelle, falls der "Content" leer ist |
| :> ''title_conf'' | Titel im Adminbereich der Datenbank |

=== Labels einzelnen Spalten zuweisen ===
$$ !! datum       = Geburtstag                    # label für die Datenspalte "datum"

=== Variablen innerhalb der Konfigurationstexte ===
| :> ''%count'' | Anzahl der Datensätze |
| :> ''%'' | ... |

== Strukturzeile (Struct)==

$$ # STRUCT #
$$ # Nun folgt die Strukturzeile (sie muss in einer Zeile stehen und darf nur einmal vorkommen --> nur die erste Strukturzeile wird geparst, alle anderen ignoriert)
$$ !! &id:int(0,), AUTO_INC|test:int(12,10000)|tage:list(montag, dienstag, mittwoch, donnerstag)|name:csv(test2, name, geschl), NULL |datum:date() | email:text.email(100), NULL


=== Schlüsselwörter ===
| :> ''&''        | bedeutet PRIMARY KEY und ist somit automatisch ''UNIQUE'' |
| :> ''AUTO_INC'' | Werte werden mit jedem neuen Eintrag automatisch inkrementiert |
| :> ''UNIQUE''   | Inhalt darf nur einmal vorkommen (Default = ''NOT UNIQUE'') |
| :> ''NULL''     | bedeutet das Feld darf leer sein (Default = ''NOT NULL'') |

 
=== Datentypen ===
$$ schlüssel:datentyp(datentypconfig), optionen
oder
$$ schlüssel:datentyp.untertyp(datentypconfig), optionen

* Datentypen:
 # :ok: ''text ( länge, default )''
 # :ok: ''date ( format, von, bis, default )'' -> :w:Checks und errorhandling fehlt
 # :ok: ''time ( von, bis, default )'' -> :w:Checks und errorhandling fehlt
 # :ok: ''datetime (von, bis, default )'' -> :w:Checks und errorhandling fehlt
 # :ok: ''int  ( von, bis, default )''
 # :ok: ''float( von, bis, kommazahlen, default )''
 # :ok: ''list ( element1, element2, ... )''
 # ''csv  ( csvname, item1, item2, ... )'' --(es wird immer der "primary key" gespeichert)--
 
* Untertypen: --noch nicht implementiert--
 # ''text.email''
 # ''text.url''
 # ''...''
 
++Datentyp: DATE++

:i: Das Datum innerhalb der CSV hat immer folgende Form: ''JJJJ-MM-TT hh:mm:ss''
$$ date(format, von, bis, default)
Parameterliste:
* **''format''**: Ausgabeformat. --noch nicht implementiert--
* **''von''**, **''bis''**: Zeitraum
* **''default''**: Entweder ein bestimmter Zeitpunkt im CSV-eigenen Datumsformat oder \\ ''NOW'' als Konstante  --(weitere Konstante werden noch implementiert)--


== Inhalt (Content) ==
$$ # CONTENT #
$$ # ...ab hier werden dann zeilenweise alle CSV - Einträge gespeichert
$$ 0|14|1|2|1231772169|piiit@xy.de
$$ 1|...