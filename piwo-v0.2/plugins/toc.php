<?phpif (!defined('INC_PATH')) {
	define ('INC_PATH', realpath(dirname(__FILE__).'/../../').'/');
}
require_once INC_PATH.'pwTools/data/IndexTable.php';
require_once INC_PATH.'pwTools/data/IndexItem.php';require_once INC_PATH.'pwTools/parser/ParserRule.php';
require_once INC_PATH.'pwTools/parser/Parser.php';require_once INC_PATH.'pwTools/tree/Node.php';
require_once INC_PATH.'piwo-v0.2/lib/common.php';
function plugin_toc(Parser $parser, Node $node) {    $indextable = $parser->getUserInfo('indextable');    if ($indextable instanceof IndexTable) {		$o	= '<div class="toc" id="__toc">';		$o .= '<ul>';		$lastlvl = 0;		foreach($indextable->getAsArray() as $item) {			if ($lastlvl < $item->getLevel()) {				$diff = $item->getLevel() - $lastlvl;				for ($i = 0; $i < $diff; $i++)					$o .= '<ul>';			} elseif ($lastlvl > $item->getLevel()) {				$diff = $lastlvl - $item->getLevel();				for ($i = 0; $i < $diff; $i++)					$o .= '</ul>';			}			$o .= '<li>';			$o .= '<a href="#header_'.$item->getId().'">'.$item->getId().' '.pw_s2e($item->getText()).'</a>';			$o .= '</li>';			$lastlvl = $item->getLevel();		}		$o .= '</ul>';		$o .= '</div>';    }    return $o;  }
function plugin_nstoc(Parser $parser, Node $node) {		$token = new ParserRule($node, $parser);	$cont = $token->getArrayFromNode($node);		$curID = pw_wiki_getid();	$id = new WikiID(isset($cont[1]) ? $curID->getFullNS().$cont[1].":" : $curID->getFullNS());		// Parameter TITLE: Print Title	$titeltxt = "";	if (in_array("TITLE", $cont)) {		$titeltxt = utf8_ucwords(str_replace(":", " &raquo; ", $id->isRootNS() ? "[root]" : ltrim($id->getFullNS(), ":")));		$titeltxt = "Inhalt des Namensraumes <i>\"$titeltxt\"</i>: ";	}		// Parameter NOERR: Do not show error messages!	// Parameter SHOWNS: Show sub-namespaces as well!	return pw_wiki_nstoc($titeltxt, in_array("NOERR", $cont), in_array("SHOWNS", $cont));}function pw_wiki_nstoc($titel, $error, $showns) {    $ext = "";  $o = "";  $glob_flag = 0;  if (!$showns) {    $ext = pw_wiki_getcfg('fileext');  } else {    $glob_flag = GLOB_ONLYDIR;  }    $id = pw_wiki_getid();  $path = pw_wiki_getcfg('storage').$id->getPath();    $wikis = glob($path."/*".$ext, $glob_flag);  // Titel werden nur ausgegeben, wenn Fehlermeldungen auch ausgegeben werden dÃ¼rfen!  // ...sonst kann es zu alleinstehenden Titeln kommen.  if (utf8_strlen($titel) > 0 and $error) {    $o .= $titel;  }  if($error && empty($wikis))    return $o."<br />".nop("Es sind keine Texte im Namensraum '".pw_s2e($id->getFullNS())."' vorhanden.", false);  $o .= "<ul>";  foreach($wikis as $i) {    $page = pw_basename($i, ".txt");    $page = utf8_ucfirst($page);    $page = pw_s2e($page);    $id = pw_wiki_path2id($i);    $o .= "<li><a href='?id=$id'>".$page."</a></li>";  }  $o .= "</ul>";  return $o;}
function plugin_trace (Parser $parser, Node $node, $sep = "&raquo;") {  $sep = ' '.$sep.' ';  $id = pw_wiki_getid();  $mode = pw_wiki_getmode();  $o = "<a href='?mode=cleared&id=".pw_s2url(pw_wiki_getcfg('startpage'))."'>Home</a>";  $fullpath = $id->getFullNSAsArray();  $p = "";  foreach ($fullpath as $i) {    $p .= "$i:";    $i = pw_url2u($i);    $i = utf8_ucfirst($i);    $i = pw_s2e($i);    $o .= $sep."<a href='?mode=cleared&id=".rtrim($p, ":")."'>".$i."</a>";  }  $pg = pw_url2u($id->getPage());  $pg = utf8_ucfirst($pg);  $pg = pw_s2e($pg);  $o .= $sep.$pg;  return $o;}?>